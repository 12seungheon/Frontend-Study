### Frontend Study Week01



### Open Graph Protocol
- 공유한 링크로부터 웹 페이지의 정보를 미리 보여주는 것
- 웹 페이지가 소셜 미디어 플랫폼 상에서 어떻게 보여질지를 정의하는 규칙이나 규약의 집합
- 대표적으로 나타낼 수 있는 것 : 썸네일 이미지, 타이틀, 설명



### OG Tag
- 위의 정의를 실제 웹 페이지에 적용하기 위한 수단

```html
<head>
...
	<meta property="og:title" content="멋쟁이사자">
	<meta property="og:description" content="멋쟁이사자처럼과 함께 즐겁게 코딩">
	<meta property="og:image" content="./thumbnail.png">
...
</head>
```



### Github Pages 배포

- 깃허브아이디/깃허브아이디.github.io 로 레포지토리 생성

- html 파일 만들기 (파일명은 꼭 index.html)

- Git 저장소 초기화 및 Github 반영 (밑 명령어 순차적으로 입력 후 실행)

```html
$ git init
$ git add .
$ git commit -m "커밋 메시지"
$ git remote add origin 원격저장소 주소
$ git push -u origin main
```

 www.깃허브아이디.github.io를 주소창에 입력하게 되면 업로드한 index.html 파일의 페이지가 뜸

---

### box-sizing : content-box와 border-box의 차이점

content-box는 요소 사이즈에 패딩과 테두리를 포함하지 않음

→ padding값이 늘어난다던가, 테두리가 두꺼워지면 전체적인 요소의 사이즈는 늘어남

border-box는 요소 사이즈에 패딩과 테두리를 포함함

→ padding값이 늘어나거나 테두리가 두꺼워지면 그만큼 내용이 차지할 수 있는 공간이 줄어듦

border-box를 universal selector로 전체 적용해서 작업하기

→ universal selector : * (asterisk)

padding과 테두리에 의해서 사이즈가 왜곡되는 일을 방지

### CSS 용어

**선택자 (selector)**

→ 어떤 HTML 요소에 스타일을 적용할 지 선택

ex. h1, div 등등

**속성 (property)**

→ 스타일을 부여할 항목

ex. color, font-size

**값 (value)**

→ 속성에 대한 값

**선언 (declaration)**

→ 속성과 값을 합한 부분

**규칙 (rule)**

→ 선택자와 선언부의 조합 (전체)

id는 css에서 잘 활용하지 않는 편, id는 문서 내에 같은 id 중복 불가능



### CSS의 특성

- **폭포수**
→ 같은 태그에 대한 규칙이 있는 경우 마지막으로 작성된 규칙 적용
- **상속**
→ 부모 요소의 CSS 규칙을 자식 요소가 상속하여 적용
→ 자식 요소가 CSS 규칙을 가지고 있다면 이를 우선하여 적용
- **우선순위**
→ CSS 규칙이 서로 충돌할 때 어떤 것을 적용할 지



### inline 요소

- 한 줄에 표시
- <a>, <img>, <span> → 기본적으로 display : inline
- 태그로 감싸진 내용만큼만 영역을 차지
- width와 height로 요소의 크기를 조절할 수 없음
- inline은 좌우 margin, padding만 적용 가능 (상하는 불가능)
- inline에 적용되는 것처럼 보이는 상하 padding은 레이아웃에 영향을 미치지 못함



### block 요소

- 개별 요소마다 줄을 바꿈
- h1, p, div → 기본적으로 display : block
- width와 height로 요소의 크기를 조절
- 내용가 별개로 자신의 영역을 가짐



### inline-block 요소

- inline과 block의 특징을 모두 포함
- 줄을 바꾸지 않음
- block처럼 width와 height를 가짐
- 상하 margin, padding이 레이아웃에 유효함

margin: 20px; → 상하좌우

margin: 20px 30px; → 상하 20, 좌우 30

margin: 20px 10px 20px 10px; → 상20, 우10, 하20, 좌10



### CSS 단위

- px : 스크린을 구성하는 작은 점
- % : 부모 요소를 기준으로 크기를 설정
→ ex) 부모 div가 100px이고, 자식 div가 50%이면 자식 div의 크기는 50px
- em : 부모 요소의 폰트 크기
- rem(root em) : 루트 요소의 폰트 크기
  
    em과 rem은 폰트 크기에 비례해서 크기 설정, 상위 요소의 크기 값에 em 값을 곱하기
    
    ex) 부모 요소의 font-size가 20px이고, 자식 요소의 width를 2em으로 주면 자식 요소의 width는 20px * 2 = 40px이 됨
    
    상위 요소를 일일이 정하고 계산하는 것은 복잡하다.
    
    → 최상위 요소인 <html>의 폰트 사이즈를 기준으로 크기 설정
    
    통일된 기준을 잡기 위해서는 rem 단위 사용을 권장
    
- vw / vh : 각 디바이스별 화면의 너비 / 높이를 기준으로 배율 설정
  
    내가 지금 보고 있는 브라우저 영억을 항상 꽉 채우는 요소로 사용되기도 함 ex) height: 100vh;
    
    

### 이미지

img 태그는 단독으로 사용하지 말고, div태그로 마크업 후 사용

```html
<div class="container">
	<img src="./image1.png" alt="img1">
</div>
```

예를 들어 html 코드를 이렇게 작성했다고 치고

```css
img{
	max-width: 100%;
}
```

부모 영역에서 벗어나지 않도록 이미지의 너비 상한선을 100%로 설정

```css
img{
	object-fit: cover;
}
```

이미지를 부모 요소 영역의 크기만큼 확대/축소하여 채움



### object-fit의 속성에 들어갈 수 있는 값들

- fill : 기본값, 콘텐츠를 늘리거나 줄여서 컨테이너를 완전히 채움. 비율 유지 x
- contain : 비율을 유지하면서 컨테이너에 맞춰지도록 조절, 공간이 남을 수 있음
- cover : 비율을 유지하면서 컨테이너 전체를 채우도록 조절, 콘텐츠가 잘릴 수 있음
- none : 크기가 변경되지 않음. 콘텐츠의 실제 크기대로 표시
- scale-down : none 또는 contain 중 하나를 선택하는데, 이 중 더 작은 이미지를 결과로 나타내는 것을 선택. 원본 이미지가 컨테이너보다 클 경우에만 contain이 적용되어 이미지가 축소됨



### overflow

요소가 박스의 내용을 어떻게 처리할지 결정하는 속성

요소의 내용이 그의 컨테이너의 크기보다 클 경우, 그 내용이 어떻게 보여질지를 정의

- visible : 기본값, 컨테이너를 벗어나도록 허용
- hidden : 컨테이너를 벗어나는 내용의 보이는 부분을 잘라냄 (컨테이너 크기 넘는 부분은 안보임)
- scroll : 컨테이너의 내용이 넘칠 경우 스크롤바가 추가되어 스크롤을 통해 숨겨진 내용을 볼 수 있음
  - 수평, 수직 또는 둘 다 방향의 스크롤바를 생성할 수 있음. 내용이 컨테이너 안에 완전히 들어맞을 때도 스크롤바가 보임
    x축 또는 y축만 스크롤이 생기게 하고싶으면 overflow-x 또는 overflow-y를 써야함

- auto : 브라우저가 자동으로 결정하게 함. 내용이 컨테이너를 벗어날 경우에만 스크롤바가 나타남



### 폰트 꾸미기

**Hex color**

→ RED / GREEN / BLUE의 값을 각각 16진수로 나타내어 조합 ex) color: #000000;

**font-weight**

글씨 굵기 속성

- 100 : Thin
- 200 : Extra Light
- 300 : Light
- 400 : Normal
- 500 : Medium
- 600 : Semi Bold
- 700 : Bold
- 800 : Extra Bold
- 900 : Black

**text-decoration**은 none이 기본값이지만, <a> 태그는 underline이 기본값

```css
a:link { /* 클릭한 적이 없는 링크 */
	color: black;
}
a:visited{ /* 방문했던 링크 */
	color: black;
}
```



### 배경 이미지 넣기

```css
.container {
	background-image: url(image1.png);
}
```

이런식으로 배경 이미지를 삽입 가능.

이렇게 이미지를 넣을 경우에, background-repeat 속성이 기본적으로 repeat으로 적용되어 있어서 배경 이미지가 container라는 클래스의 크기보다 작을 경우 이미지가 반복되어 보여짐

```css
.container{
	background-repeat: no-repeat;
}
```

no-repeat 값을 주어서 반복하지 않게 설정 가능



### background-size 속성 값

- auto : 기본값, 배경 이미지의 원래 크기가 유지
- <길이 값> : 배경 이미지의 크기를 고정된 값으로 지정 가능 ex)background-size: 200px 100px;
- <백분율 값> : 배경 이미지의 크기를 백분율로 지정할 수 있음
- cover : 배경 이미지가 요소의 배경 영역을 완전히 채울 수 있도록 조정, 이미지의 비율은 유지 (이미지의 일부가 잘릴 수 있음)
- contain : 이미지가 요소의 크기에 맞춰 조정, 비율 유지 (빈 공간이 생길 수 있음)

background-image 로 배경에 이미지를 넣으면, 기본적으로 이미지는 중앙에 오지 않음

중앙에 오게 하려면, background-position: center;을 통해 중앙에 오게 할 수 있음



### 정렬

margin: 0 auto; - 가운데 정렬

→ 상하의 margin은 0, 좌우의 margin은 auto로 함

→ 좌우의 margin을 동일하게 해서 가운데로 오게 함



### text-align: center;

부모 요소가 블록이고, 정렬하려는 자식 요소가 인라인 일 때 블록 요소 내의 인라인 요소를 가운데 정렬

글씨 뿐만 아니라 “인라인 요소 전체”가 가운데정렬이 됨 → img태그 포함
